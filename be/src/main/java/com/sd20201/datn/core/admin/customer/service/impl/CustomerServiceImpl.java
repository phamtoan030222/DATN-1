package com.sd20201.datn.core.admin.customer.service.impl;

import com.sd20201.datn.core.admin.customer.model.response.CustomerResponse;
import com.sd20201.datn.core.common.base.PageableObject;
import com.sd20201.datn.core.common.base.ResponseObject;
import com.sd20201.datn.core.admin.customer.model.request.CustomerCreateUpdateRequest;
import com.sd20201.datn.core.admin.customer.model.request.CustomerRequest;
import com.sd20201.datn.core.admin.customer.repository.AdCustomerRepository;
import com.sd20201.datn.core.admin.customer.service.CustomerService;
import com.sd20201.datn.entity.Account;
import com.sd20201.datn.entity.Customer;
import com.sd20201.datn.infrastructure.constant.EntityStatus;
import com.sd20201.datn.repository.AccountRepository;
import com.sd20201.datn.utils.Helper;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class CustomerServiceImpl implements CustomerService {
    private final AdCustomerRepository adCustomerRepository;
    private final AccountRepository accountRepository;

    @Override
    public ResponseObject<?> getAllCustomers(CustomerRequest request) {
        Pageable pageable = Helper.createPageable(request, "createdDate");

        return new ResponseObject<>(
                PageableObject.of(adCustomerRepository.getAllCustomers(
                        pageable,
                        request.getCustomerName(),
                        request.getCustomerStatus(),
                        request.getCustomerGender()
                )),
                HttpStatus.OK,
                "L·∫•y th√†nh c√¥ng danh s√°ch kh√°ch h√†ng"
        );
    }

    @Override
    public ResponseObject<?> createCustomer(CustomerCreateUpdateRequest request) {
        // Ki·ªÉm tra t√™n tr√πng

        List<Customer> customersByPhone = adCustomerRepository.findByExactPhone(request.getCustomerPhone());
        if (!customersByPhone.isEmpty()) {
            return new ResponseObject<>(null, HttpStatus.BAD_REQUEST,
                    "S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i", false, "CUSTOMER_PHONE_EXISTS");
        }

        // ‚úÖ TH√äM: Ki·ªÉm tra email tr√πng (n·∫øu c√≥ email)
        if (request.getCustomerEmail() != null && !request.getCustomerEmail().trim().isEmpty()) {
            List<Customer> customersByEmail = adCustomerRepository.findByEmail(request.getCustomerEmail());
            if (!customersByEmail.isEmpty()) {
                return new ResponseObject<>(null, HttpStatus.BAD_REQUEST,
                        "Email ƒë√£ t·ªìn t·∫°i", false, "CUSTOMER_EMAIL_EXISTS");
            }
        }

        // X·ª≠ l√Ω account
        Account account = null;
        if (request.getCustomerIdAccount() != null) {
            account = accountRepository.findById(request.getCustomerIdAccount()).orElse(null);
            if (account == null) {
                return new ResponseObject<>(null, HttpStatus.BAD_REQUEST,
                        "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i", false, "ACCOUNT_NOT_FOUND");
            }
        }

        String generatedCode = generateCustomerCode(request.getCustomerName());
        // T·∫°o customer
        Customer customer = new Customer();
        customer.setAccount(account);
        customer.setCode(generatedCode);
        customer.setName(request.getCustomerName());
        customer.setPhone(request.getCustomerPhone());
        customer.setEmail(request.getCustomerEmail());
        customer.setAvatarUrl(request.getCustomerAvatar());
        customer.setBirthday(request.getCustomerBirthday());
        customer.setGender(request.getCustomerGender());
        customer.setDescription(request.getCustomerDescription());

        customer.setStatus(EntityStatus.ACTIVE);
        customer.setCreatedDate(System.currentTimeMillis());

// Th√™m debug n√†y NGAY SAU khi save:
        adCustomerRepository.save(customer);
        adCustomerRepository.flush(); // Force DB write

// Query l·∫°i t·ª´ DB
        Customer freshCustomer = adCustomerRepository.findById(customer.getId()).orElse(null);

// ‚úÖ Response data - S·ª¨A LOGIC NG∆Ø·ª¢C
        Map<String, Object> responseData = new HashMap<>();
        responseData.put("id", customer.getId());
        responseData.put("customerName", customer.getName());
        responseData.put("customerPhone", customer.getPhone());
        responseData.put("customerEmail", customer.getEmail());
        responseData.put("customerGender", customer.getGender());
        responseData.put("customerBirthday", customer.getBirthday());

// D√πng fresh data cho response
        int actualResponseStatus = freshCustomer.getStatus() == EntityStatus.ACTIVE ? 1 : 0;
        responseData.put("customerStatus", actualResponseStatus);
        responseData.put("customerCode", customer.getCode());
        responseData.put("customerAvatar", customer.getAvatarUrl());
        responseData.put("customerDescription", customer.getDescription());
        responseData.put("customerCreatedDate", customer.getCreatedDate());
        return new ResponseObject<>(responseData, HttpStatus.OK, "Th√™m kh√°ch h√†ng th√†nh c√¥ng", true, null);
    }

    @Override
    public ResponseObject<?> updateCustomer(String id, CustomerCreateUpdateRequest request) {
        Customer customer = adCustomerRepository.findById(id).orElse(null);
        if (customer == null) {
            return new ResponseObject<>(
                    null,
                    HttpStatus.NOT_FOUND,
                    "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi id = " + id,
                    false,
                    "CUSTOMER_NOT_FOUND"
            );
        }

        // ‚úÖ Ki·ªÉm tra tr√πng s·ªë ƒëi·ªán tho·∫°i (ngo·∫°i tr·ª´ ch√≠nh m√¨nh)
        List<Customer> customersByPhone = adCustomerRepository.findByExactPhone(request.getCustomerPhone());
        if (!customersByPhone.isEmpty() && !customersByPhone.get(0).getId().equals(id)) {
            return new ResponseObject<>(
                    null,
                    HttpStatus.BAD_REQUEST,
                    "S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i",
                    false,
                    "CUSTOMER_PHONE_EXISTS"
            );
        }

        // ‚úÖ Ki·ªÉm tra tr√πng email (ngo·∫°i tr·ª´ ch√≠nh m√¨nh, n·∫øu c√≥ email)
        if (request.getCustomerEmail() != null && !request.getCustomerEmail().trim().isEmpty()) {
            List<Customer> customersByEmail = adCustomerRepository.findByEmail(request.getCustomerEmail());
            if (!customersByEmail.isEmpty() && !customersByEmail.get(0).getId().equals(id)) {
                return new ResponseObject<>(
                        null,
                        HttpStatus.BAD_REQUEST,
                        "Email ƒë√£ t·ªìn t·∫°i",
                        false,
                        "CUSTOMER_EMAIL_EXISTS"
                );
            }
        }

        // X·ª≠ l√Ω account n·∫øu c√≥ customerIdAccount
        if (request.getCustomerIdAccount() != null) {
            Account account = accountRepository.findById(request.getCustomerIdAccount()).orElse(null);
            if (account == null) {
                return new ResponseObject<>(null, HttpStatus.BAD_REQUEST,
                        "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i", false, "ACCOUNT_NOT_FOUND");
            }
            customer.setAccount(account);
        } else {
            customer.setAccount(null);
        }

        // C·∫≠p nh·∫≠t th√¥ng tin kh√°c
        customer.setName(request.getCustomerName());
        customer.setPhone(request.getCustomerPhone());
        customer.setEmail(request.getCustomerEmail());
        if (request.getCustomerAvatar() != null && !request.getCustomerAvatar().trim().isEmpty()) {
            customer.setAvatarUrl(request.getCustomerAvatar().trim());
        } else if (request.getCustomerAvatar() != null && request.getCustomerAvatar().trim().isEmpty()) {
            customer.setAvatarUrl(null); // Clear avatar n·∫øu g·ª≠i empty string
        }
        customer.setBirthday(request.getCustomerBirthday());
        customer.setGender(request.getCustomerGender());
        customer.setDescription(request.getCustomerDescription());

        // üî• TH√äM D√íNG N√ÄY - C·∫≠p nh·∫≠t status
        if (request.getCustomerStatus() != null) {
            EntityStatus status = request.getCustomerStatus() == 1
                    ? EntityStatus.ACTIVE
                    : EntityStatus.INACTIVE;
            customer.setStatus(status);
        }

        adCustomerRepository.save(customer);

        return new ResponseObject<>(
                customer,
                HttpStatus.OK,
                "C·∫≠p nh·∫≠t kh√°ch h√†ng th√†nh c√¥ng",
                true,
                null
        );
    }

    @Override
    public ResponseObject<?> deleteCustomer(String id) {
        Customer customer = adCustomerRepository.findById(id).orElse(null);
        if (customer == null) {
            return new ResponseObject<>(
                    null,
                    HttpStatus.NOT_FOUND,
                    "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi id = " + id,
                    false,
                    "CUSTOMER_NOT_FOUND"
            );
        }

        // üîπ X√≥a m·ªÅm
        customer.setStatus(EntityStatus.INACTIVE);
        adCustomerRepository.save(customer);

        return new ResponseObject<>(
                null,
                HttpStatus.OK,
                "X√≥a kh√°ch h√†ng th√†nh c√¥ng",
                true,
                null
        );
    }

    @Override
    public ResponseObject<?> getCustomerById(String id) {
        CustomerResponse customer = adCustomerRepository.findCustomerById(id);
        if (customer == null) {
            return new ResponseObject<>(
                    null,
                    HttpStatus.NOT_FOUND,
                    "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi id = " + id,
                    false,
                    "CUSTOMER_NOT_FOUND"
            );
        }

        return new ResponseObject<>(customer, HttpStatus.OK, "L·∫•y th√¥ng tin kh√°ch h√†ng th√†nh c√¥ng", true, null);
    }

    private String generateCustomerCode(String customerName) {
        if (customerName == null || customerName.trim().isEmpty()) {
            return "customer001";
        }

        // T·∫°o base code t·ª´ t√™n
        String baseCode = createBaseCodeFromName(customerName);

        // T√¨m s·ªë th·ª© t·ª± ti·∫øp theo
        int nextNumber = findNextAvailableNumber(baseCode);

        // Format: baseCode + s·ªë 3 ch·ªØ s·ªë
        return baseCode + String.format("%03d", nextNumber);
    }

    private String createBaseCodeFromName(String customerName) {
        String[] words = customerName.trim().split("\\s+");

        if (words.length == 0) {
            return "customer";
        }

        StringBuilder baseCode = new StringBuilder();

        // L·∫•y t·ª´ cu·ªëi c√πng (t√™n) l√†m ph·∫ßn ƒë·∫ßu
        String lastName = removeVietnameseAccents(words[words.length - 1]).toLowerCase();
        baseCode.append(lastName);

        // L·∫•y ch·ªØ c√°i ƒë·∫ßu c·ªßa c√°c t·ª´ tr∆∞·ªõc (h·ªç v√† t√™n ƒë·ªám)
        for (int i = 0; i < words.length - 1; i++) {
            String word = removeVietnameseAccents(words[i]).toLowerCase();
            if (!word.isEmpty()) {
                baseCode.append(word.charAt(0));
            }
        }

        return baseCode.toString();
    }

    private int findNextAvailableNumber(String baseCode) {
        // T√¨m t·∫•t c·∫£ m√£ kh√°ch h√†ng c√≥ c√πng base code
        List<String> existingCodes = adCustomerRepository.findCustomerCodesByPattern(baseCode + "%");

        int maxNumber = 0;
        String pattern = "^" + baseCode + "(\\d{3})$";

        for (String code : existingCodes) {
            if (code.matches(pattern)) {
                try {
                    String numberPart = code.substring(baseCode.length());
                    int number = Integer.parseInt(numberPart);
                    maxNumber = Math.max(maxNumber, number);
                } catch (NumberFormatException e) {
                    // Ignore invalid codes
                }
            }
        }

        return maxNumber + 1;
    }

    private String removeVietnameseAccents(String input) {
        if (input == null) return "";

        String[][] accents = {
                {"√†", "√°", "·∫°", "·∫£", "√£", "√¢", "·∫ß", "·∫•", "·∫≠", "·∫©", "·∫´", "ƒÉ", "·∫±", "·∫Ø", "·∫∑", "·∫≥", "·∫µ"},
                {"√®", "√©", "·∫π", "·∫ª", "·∫Ω", "√™", "·ªÅ", "·∫ø", "·ªá", "·ªÉ", "·ªÖ"},
                {"√¨", "√≠", "·ªã", "·ªâ", "ƒ©"},
                {"√≤", "√≥", "·ªç", "·ªè", "√µ", "√¥", "·ªì", "·ªë", "·ªô", "·ªï", "·ªó", "∆°", "·ªù", "·ªõ", "·ª£", "·ªü", "·ª°"},
                {"√π", "√∫", "·ª•", "·ªß", "≈©", "∆∞", "·ª´", "·ª©", "·ª±", "·ª≠", "·ªØ"},
                {"·ª≥", "√Ω", "·ªµ", "·ª∑", "·ªπ"},
                {"ƒë"},
                {"√Ä", "√Å", "·∫†", "·∫¢", "√É", "√Ç", "·∫¶", "·∫§", "·∫¨", "·∫®", "·∫™", "ƒÇ", "·∫∞", "·∫Æ", "·∫∂", "·∫≤", "·∫¥"},
                {"√à", "√â", "·∫∏", "·∫∫", "·∫º", "√ä", "·ªÄ", "·∫æ", "·ªÜ", "·ªÇ", "·ªÑ"},
                {"√å", "√ç", "·ªä", "·ªà", "ƒ®"},
                {"√í", "√ì", "·ªå", "·ªé", "√ï", "√î", "·ªí", "·ªê", "·ªò", "·ªî", "·ªñ", "∆†", "·ªú", "·ªö", "·ª¢", "·ªû", "·ª†"},
                {"√ô", "√ö", "·ª§", "·ª¶", "≈®", "∆Ø", "·ª™", "·ª®", "·ª∞", "·ª¨", "·ªÆ"},
                {"·ª≤", "√ù", "·ª¥", "·ª∂", "·ª∏"},
                {"ƒê"}
        };

        String[] replacements = {"a", "e", "i", "o", "u", "y", "d", "A", "E", "I", "O", "U", "Y", "D"};

        String result = input;
        for (int i = 0; i < accents.length; i++) {
            for (String accent : accents[i]) {
                result = result.replace(accent, replacements[i]);
            }
        }

        return result;
    }

}
