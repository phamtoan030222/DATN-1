package com.sd20201.datn.utils;

import com.sd20201.datn.core.common.base.PageableRequest;
import com.sd20201.datn.core.common.base.ResponseObject;
import com.sd20201.datn.entity.Discount;
import com.sd20201.datn.infrastructure.constant.PaginationConstant;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;


import java.text.Normalizer;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
public class Helper {

    public static String appendWildcard(String url) {
        return url + "/**";
    }

    public static Pageable createPageable(PageableRequest request, String defaultSortBy) {
        return PageRequest.of(
                request.getPage() - 1,
                request.getSize() == 0 ? PaginationConstant.DEFAULT_SIZE : request.getSize(),
                Sort.by(
                        (Sort.Direction.fromString(
                                request.getOrderBy()) == Sort.Direction.DESC ||
                                request.getOrderBy() == null
                        ) ? Sort.Direction.DESC : Sort.Direction.ASC,
                        (request.getSortBy() == null
                                || request.getSortBy().isEmpty()
                        ) ? defaultSortBy : request.getSortBy()
                ));
    }

    public static Pageable createPageable(PageableRequest request, String defaultSortBy, String defaultOrderBy) {
        int page = request.getPage() - 1;
        int size = request.getSize() == 0 ? PaginationConstant.DEFAULT_SIZE : request.getSize();
        Sort.Direction direction = request.getOrderBy() == null || request.getOrderBy().isEmpty()
                ? Sort.Direction.fromString(defaultOrderBy)
                : Sort.Direction.fromString(request.getOrderBy());
        String sortBy = request.getSortBy();
        if (sortBy == null || sortBy.isEmpty()) {
            sortBy = defaultSortBy;
        }
        return PageRequest.of(page, size, Sort.by(direction, sortBy));
    }

    public static Pageable createPageable(PageableRequest request) {
        return createPageable(request, "createdDate", "DESC");
    }


    public static ResponseEntity<?> createResponseEntity(ResponseObject<?> responseObject) {
        return new ResponseEntity<>(responseObject, responseObject.getStatus());
    }

    public static boolean isValidPhoneNumber(String phoneNumber) {
        String regex = "^0[0-9]{9,10}$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(phoneNumber);
        return !matcher.matches();
    }

    public static String replaceManySpaceToOneSpace(String name) {
        // Thay th·∫ø t·∫•t c·∫£ kho·∫£ng tr·∫Øng li√™n ti·∫øp b·∫±ng d·∫•u g·∫°ch d∆∞·ªõi
        return name.replaceAll("\\s+", " ");
    }

    public static String replaceSpaceToEmpty(String name) {
        // Thay th·∫ø t·∫•t c·∫£ kho·∫£ng tr·∫Øng li√™n ti·∫øp b·∫±ng d·∫•u g·∫°ch d∆∞·ªõi
        return name.replaceAll("\\s+", "");
    }

    private static final Map<Character, Character> SPECIAL_CHAR_MAP = new HashMap<>();

    static {
        SPECIAL_CHAR_MAP.put('ƒë', 'd');
        SPECIAL_CHAR_MAP.put('ƒê', 'D');
        SPECIAL_CHAR_MAP.put('∆°', 'o');
        SPECIAL_CHAR_MAP.put('∆†', 'O');
        SPECIAL_CHAR_MAP.put('·ªõ', 'o');
        SPECIAL_CHAR_MAP.put('·ªù', 'o');
        SPECIAL_CHAR_MAP.put('·ªü', 'o');
        SPECIAL_CHAR_MAP.put('·ª°', 'o');
        SPECIAL_CHAR_MAP.put('·ª£', 'o');
        SPECIAL_CHAR_MAP.put('·ªë', 'o');
        SPECIAL_CHAR_MAP.put('·ªì', 'o');
        SPECIAL_CHAR_MAP.put('·ªï', 'o');
        SPECIAL_CHAR_MAP.put('·ªó', 'o');
        SPECIAL_CHAR_MAP.put('·ªô', 'o');
        SPECIAL_CHAR_MAP.put('·ªõ', 'o');
        SPECIAL_CHAR_MAP.put('·ªù', 'o');
        SPECIAL_CHAR_MAP.put('·ªü', 'o');
        SPECIAL_CHAR_MAP.put('·ª°', 'o');
        SPECIAL_CHAR_MAP.put('·ª£', 'o');
        SPECIAL_CHAR_MAP.put('ƒÉ', 'a');
        SPECIAL_CHAR_MAP.put('·∫Ø', 'a');
        SPECIAL_CHAR_MAP.put('·∫±', 'a');
        SPECIAL_CHAR_MAP.put('·∫µ', 'a');
        SPECIAL_CHAR_MAP.put('·∫∑', 'a');
        SPECIAL_CHAR_MAP.put('√¢', 'a');
        SPECIAL_CHAR_MAP.put('·∫•', 'a');
        SPECIAL_CHAR_MAP.put('·∫ß', 'a');
        SPECIAL_CHAR_MAP.put('·∫©', 'a');
        SPECIAL_CHAR_MAP.put('·∫´', 'a');
        SPECIAL_CHAR_MAP.put('·∫≠', 'a');
        SPECIAL_CHAR_MAP.put('∆∞', 'u');
        SPECIAL_CHAR_MAP.put('·ª©', 'u');
        SPECIAL_CHAR_MAP.put('·ª´', 'u');
        SPECIAL_CHAR_MAP.put('·ª≠', 'u');
        SPECIAL_CHAR_MAP.put('·ªØ', 'u');
        SPECIAL_CHAR_MAP.put('·ª±', 'u');
        // Th√™m c√°c k√Ω t·ª± kh√°c n·∫øu c·∫ßn
    }

    public static String generateCodeFromName(String name) {
        // Chuy·ªÉn role name chu·ªói th√†nh ch·ªØ hoa
        String upperCaseString = name.toUpperCase();

        // Thay th·∫ø c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
        StringBuilder stringBuilder = new StringBuilder();
        for (char c : upperCaseString.toCharArray()) {
            if (SPECIAL_CHAR_MAP.containsKey(c)) {
                stringBuilder.append(SPECIAL_CHAR_MAP.get(c));
            } else {
                stringBuilder.append(c);
            }
        }
        String replacedString = stringBuilder.toString();

        // Lo·∫°i b·ªè d·∫•u
        String normalizedString = Normalizer.normalize(replacedString, Normalizer.Form.NFD);
        String withoutAccentString = normalizedString.replaceAll("\\p{M}", "");

        // Thay th·∫ø t·∫•t c·∫£ kho·∫£ng tr·∫Øng li√™n ti·∫øp b·∫±ng d·∫•u g·∫°ch d∆∞·ªõi
        return withoutAccentString.replaceAll("\\s+", "_");
    }

    public static String generateCodeProductDetail() {
        return "PD" + UUID.randomUUID().toString().substring(0, 6).toUpperCase();
    }

    public static String generateCodeVoucher() {
        return "VC" + UUID.randomUUID().toString().substring(0, 6).toUpperCase();
    }
    public static String  buildEmailContent(Discount discount) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm");

        StringBuilder content = new StringBuilder();
        content.append("K√≠nh ch√†o Qu√Ω kh√°ch h√†ng,\n\n");
        content.append("Ch√∫ng t√¥i vui m·ª´ng th√¥ng b√°o ƒë·∫øn Qu√Ω kh√°ch v·ªÅ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i ƒë·∫∑c bi·ªát:\n\n");
        content.append("üî• T√äN CH∆Ø∆†NG TR√åNH: ").append(discount.getName()).append("\n");
        content.append("üí∞ M√É GI·∫¢M GI√Å: ").append(discount.getCode()).append("\n");
        content.append("üìä PH·∫¶N TRƒÇM GI·∫¢M: ").append(discount.getPercentage()).append("%\n");

        if (discount.getDescription() != null && !discount.getDescription().trim().isEmpty()) {
            content.append("üìù M√î T·∫¢: ").append(discount.getDescription()).append("\n");
        }

        if (discount.getStartDate() != null) {
            content.append("‚è∞ TH·ªúI GIAN B·∫ÆT ƒê·∫¶U: ").append(dateFormat.format(new Date(discount.getStartDate()))).append("\n");
        }

        if (discount.getEndDate() != null) {
            content.append("‚è∞ TH·ªúI GIAN K·∫æT TH√öC: ").append(dateFormat.format(new Date(discount.getEndDate()))).append("\n");
        }

        content.append("\n");
        content.append("H√£y nhanh tay s·ª≠ d·ª•ng m√£ gi·∫£m gi√° ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c ∆∞u ƒë√£i t·ªët nh·∫•t!\n\n");
        content.append("C√°ch s·ª≠ d·ª•ng:\n");
        content.append("1. Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng\n");
        content.append("2. Nh·∫≠p m√£ gi·∫£m gi√°: ").append(discount.getCode()).append("\n");
        content.append("3. √Åp d·ª•ng v√† ho√†n t·∫•t thanh to√°n\n\n");
        content.append("C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng v√† ·ªßng h·ªô ch√∫ng t√¥i!\n\n");
        content.append("Tr√¢n tr·ªçng,\n");
        content.append("ƒê·ªôi ng≈© [Siu siu siu 5 anh em siu nh√¢n]");

        return content.toString();
    }

}
